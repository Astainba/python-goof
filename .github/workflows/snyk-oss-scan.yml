- name: Generate PR comment summary
run: |
  node <<'EOF'
  const fs = require('fs');
  const data = JSON.parse(fs.readFileSync('snyk-oss-results.json', 'utf8'));
  const severityRank = s => ({critical: 4, high: 3}[s] || 0);
  const severityIcons = { critical: '🔴', high: '🟠' };
  const manifestGroups = {};

  const projects = Array.isArray(data) ? data : [data];

  for (const project of projects) {
    const manifest = project.displayTargetFile || project.targetFile || project.projectName || 'unknown';
    for (const vuln of project.vulnerabilities || []) {
      if (!['critical', 'high'].includes(vuln.severity)) continue;
      manifestGroups[manifest] = manifestGroups[manifest] || [];
      manifestGroups[manifest].push(vuln);
    }
  }

  let output = '<!-- SNYK_OSS_SUMMARY -->\n';
  output += '## <img src="https://cdn.brandfetch.io/id8lDQ6AMj/idG0kOimA5.svg?c=1dxbfHSJFAPEGdCLU4o5B" alt="Snyk" height="44" /> Snyk OSS Vulnerabilities by Manifest\n\n';

  for (const file in manifestGroups) {
    const vulns = manifestGroups[file].sort((a, b) => severityRank(b.severity) - severityRank(a.severity));

    const vulnMap = new Map();
    const criticalPackages = new Set();
    const highPackages = new Set();
    let totalOccurrences = 0;

    for (const v of vulns) {
      const key = `${v.packageName}@${v.version}`;
      const severity = v.severity;
      if (!vulnMap.has(key)) {
        vulnMap.set(key, { vuln: v, count: 0, titles: new Set(), severity });
      }
      const entry = vulnMap.get(key);
      entry.count++;
      entry.titles.add(v.title);
      totalOccurrences++;

      if (severity === 'critical') criticalPackages.add(key);
      if (severity === 'high') highPackages.add(key);
    }

    let criticalCount = 0;
    let highCount = 0;
    for (const { count, severity } of vulnMap.values()) {
      if (severity === 'critical') criticalCount += count;
      if (severity === 'high') highCount += count;
    }

    const totalUniquePackages = vulnMap.size;

    output += `### 📦 ${file}  \n`;
    output += `🔴 ${criticalCount} critical vulnerability occurrences across ${criticalPackages.size} unique packages\n`;
    output += `🟠 ${highCount} high vulnerability occurrences across ${highPackages.size} unique packages\n`;
    output += `**${totalUniquePackages} total affected packages (${totalOccurrences} total issues)**\n\n`;

    output += `| Severity | Package | Dependency Type | CVSS | Occurrences | Title | Fix Available | Advisor |\n`;
    output += `|----------|---------|------------------|------|-------------|-------|---------------|---------|\n`;

    for (const [key, { vuln, count, titles, severity }] of vulnMap.entries()) {
      const icon = severityIcons[severity] || '';
      const snykUrl = vuln.id ? `https://security.snyk.io/vuln/${vuln.id}` : '';
      const pkgUrl = `https://pypi.org/project/${vuln.packageName}/${vuln.version}/`;
      const advisorUrl = `https://security.snyk.io/package/pip/${vuln.packageName}/${vuln.version}`;
      const fix = vuln.fixedIn?.[0] || 'N/A';
      const title = [...titles][0];

      let score = vuln.cvssScore || (vuln.cvssDetails?.[0]?.cvssV3BaseScore || 'N/A');
      if (typeof score === 'number') score = score.toFixed(1);

      const isTransitive = vuln.from?.length > 2;
      const type = isTransitive ? 'Transitive' : 'Direct';

      output += `| ${icon} ${severity.toUpperCase()} | [${vuln.packageName}@${vuln.version}](${pkgUrl}) | ${type} | ${score} | ${count} | [${title}](${snykUrl}) | ${fix} | [View](${advisorUrl}) |\n`;
    }
    output += '\n';
  }

  if (output.trim().length < 50) {
    output += '_No critical or high vulnerabilities found._\n';
  }

  output += '\n---\n';
  output += `### ℹ️ Summary Notes\n`;
  output += `- **Dependency Type**: _Direct_ = explicitly declared by your project. _Transitive_ = introduced via another dependency.\n`;
  output += `- **Occurrences**: Number of separate dependency paths that lead to the same vulnerable package/version.\n`;

  fs.writeFileSync('pr-comment.md', output);
  EOF
